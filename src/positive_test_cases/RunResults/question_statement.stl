Reading "stl.flex"
Constructing NFA : 283 states in NFA
Converting NFA to DFA : 
..........................................................................................................................
124 states before minimization, 109 states in minimized DFA
Old file "Yylex.java" saved as "Yylex.java~"
Writing code to "Yylex.java"

Compiling ...

lex: found int

found type (int)
lex: found whitespace or newline or tab

lex: found id

lex: found individual char: (

lex: found individual char: )

found optional_param_list
lex: found individual char: {

found statements
Created Node of Type: StatementsNode
lex: found question

found type (question)
lex: found whitespace or newline or tab

lex: found id

Created Node of Type: IDNode
Created Node of Type: DeclarationNode
lex: found individual char: =

lex: found whitespace or newline or tab

lex: found individual char: $

lex: found string_literal

found a factor (string)
Created Node of Type: LiteralNode
found a term
lex: found individual char: :

found a relational_operand
found a equality_operand
found a boolean_operand
found a not_boolean_operand
found an expression (not boolean)
lex: found string_literal

found a factor (string)
Created Node of Type: LiteralNode
found a term
lex: found individual char: [

found a relational_operand
found a equality_operand
found a boolean_operand
found a not_boolean_operand
found an expression (not boolean)
lex: found string_literal

found a factor (string)
Created Node of Type: LiteralNode
found a term
lex: found individual char: :

found a relational_operand
found a equality_operand
found a boolean_operand
found a not_boolean_operand
found an expression (not boolean)
lex: found int_literal

found a factor (int)
Created Node of Type: LiteralNode
found a term
lex: found individual char: ,

found a relational_operand
found a equality_operand
found a boolean_operand
found a not_boolean_operand
found an expression (not boolean)
found an answer_choice
Created Node of Type: AnswerChoiceNode
found answer_choices
Created Node of Type: AnswerChoicesListNode
lex: found whitespace or newline or tab

lex: found string_literal

found a factor (string)
Created Node of Type: LiteralNode
found a term
lex: found individual char: :

found a relational_operand
found a equality_operand
found a boolean_operand
found a not_boolean_operand
found an expression (not boolean)
lex: found individual char: -

lex: found int_literal

found a factor (int)
Created Node of Type: LiteralNode
Created Node of Type: ArithmeticOperatorNode
found a term (unary -)
lex: found individual char: ,

found a relational_operand
found a equality_operand
found a boolean_operand
found a not_boolean_operand
found an expression (not boolean)
found an answer_choice
Created Node of Type: AnswerChoiceNode
found answer_choices
lex: found whitespace or newline or tab

lex: found string_literal

found a factor (string)
Created Node of Type: LiteralNode
found a term
lex: found individual char: :

found a relational_operand
found a equality_operand
found a boolean_operand
found a not_boolean_operand
found an expression (not boolean)
lex: found int_literal

found a factor (int)
Created Node of Type: LiteralNode
found a term
lex: found individual char: ]

found a relational_operand
found a equality_operand
found a boolean_operand
found a not_boolean_operand
found an expression (not boolean)
found an answer_choice
Created Node of Type: AnswerChoiceNode
found answer_choices
lex: found individual char: $

found question_literal
Created Node of Type: QuestionLiteralNode
found a term
lex: found individual char: ;

found a relational_operand
found a equality_operand
found a boolean_operand
found a not_boolean_operand
found an expression (not boolean)
found statement (int i=5;)
Created Node of Type: AssignmentOperatorNode
found statements
lex: found return

lex: found whitespace or newline or tab

lex: found int_literal

found a factor (int)
Created Node of Type: LiteralNode
found a term
lex: found individual char: ;

found a relational_operand
found a equality_operand
found a boolean_operand
found a not_boolean_operand
found an expression (not boolean)
found optional_expression
found statement (return)
Created Node of Type: ReturnNode
found statements
lex: found individual char: }

found function
Created Node of Type: FunctionNode
found function_list
found optional_function_list

found a program
Created Node of Type: ProgramNode
** Inserting new variable into symbols table:
Type:question
Var Name: _smartestVar_q
Line Number: 5

Compiled successfully
CODE OUTPUT --------------------------
import java.util.ArrayList;
public class STL {
public static void main(String[] args) {
_smartestFunction_main();
}
public static int _smartestFunction_main(  )
{
QuestionObject _smartestVar_q = new Question("Math-Easy", "What is 5*4?", new AnswerChoicesList(new AnswerChoice("20", 10), new AnswerChoice("9",  - 4), new AnswerChoice("10", 0)));
return 0;
}
}

========================


Symbols Table:

Variable: q

========================

Functions Table:

Variable: readline
Variable: printvar
Variable: load
Variable: print
Variable: main
