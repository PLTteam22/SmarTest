/* The following code was generated by JFlex 1.4.3 on 4/24/12 9:45 PM */

/*stl.flex*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/24/12 9:45 PM from the specification file
 * <tt>stl.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\47\1\1\2\50\1\2\22\0\1\47\1\22\1\36\2\0"+
    "\1\33\1\0\1\35\6\0\1\45\1\0\12\34\2\0\1\31\1\23"+
    "\1\32\2\0\1\11\1\25\1\24\1\14\1\5\1\4\1\30\1\20"+
    "\1\3\2\46\1\6\1\46\1\13\1\10\1\16\1\27\1\15\1\7"+
    "\1\12\1\21\1\26\1\17\3\46\1\0\1\37\2\0\1\46\1\0"+
    "\1\11\1\44\1\24\1\14\1\5\1\40\1\30\1\20\1\3\2\46"+
    "\1\6\1\46\1\42\1\10\1\16\1\27\1\43\1\7\1\41\1\21"+
    "\1\26\1\17\3\46\12\0\1\50\u1fa2\0\2\50\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\14\3\2\1\4\3\1\4\1\5"+
    "\1\6\1\7\2\1\1\10\1\11\7\3\1\12\5\3"+
    "\1\13\1\14\4\3\1\15\1\16\1\17\4\0\1\20"+
    "\1\0\1\21\4\3\1\22\1\3\1\23\1\3\1\24"+
    "\6\3\1\0\2\25\1\0\1\26\1\27\1\3\1\30"+
    "\1\31\1\3\1\32\2\3\1\33\1\3\1\34\1\3"+
    "\1\25\1\35\1\0\1\36\2\3\1\37\2\3\1\0"+
    "\1\40\1\41\2\3\1\42\1\43\1\3\1\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\51\0\122\0\173\0\244\0\315\0\366"+
    "\0\u011f\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e"+
    "\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d\0\u0386"+
    "\0\u03af\0\u03d8\0\u0401\0\u042a\0\u0453\0\u01ec\0\u047c\0\u04a5"+
    "\0\u04ce\0\u04f7\0\u0520\0\u0549\0\u0572\0\u01ec\0\u059b\0\u05c4"+
    "\0\u05ed\0\u0616\0\u063f\0\51\0\51\0\u0668\0\u0691\0\u06ba"+
    "\0\u06e3\0\51\0\51\0\51\0\u070c\0\u0735\0\u075e\0\u042a"+
    "\0\51\0\u0787\0\u01ec\0\u07b0\0\u07d9\0\u0802\0\u082b\0\u01ec"+
    "\0\u0854\0\u01ec\0\u087d\0\u01ec\0\u08a6\0\u08cf\0\u08f8\0\u0921"+
    "\0\u094a\0\u0973\0\u099c\0\u099c\0\u09c5\0\u09ee\0\u0735\0\51"+
    "\0\u0a17\0\u01ec\0\u01ec\0\u0a40\0\u01ec\0\u0a69\0\u0a92\0\u01ec"+
    "\0\u0abb\0\u01ec\0\u0ae4\0\51\0\51\0\u0b0d\0\u01ec\0\u0b36"+
    "\0\u0b5f\0\u01ec\0\u0b88\0\u0bb1\0\u0bda\0\u01ec\0\u01ec\0\u0c03"+
    "\0\u0c2c\0\u0bda\0\u01ec\0\u0c55\0\u01ec";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\16\1\20"+
    "\2\16\1\21\1\22\1\23\1\24\1\25\1\26\1\16"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\2\1\6"+
    "\1\14\1\15\1\17\1\24\1\2\1\16\1\35\1\2"+
    "\52\0\1\3\52\0\1\16\1\36\6\16\1\37\6\16"+
    "\2\0\5\16\3\0\1\16\3\0\1\36\1\16\1\37"+
    "\2\16\1\0\1\16\5\0\3\16\1\40\2\16\1\41"+
    "\10\16\2\0\5\16\3\0\1\16\3\0\5\16\1\0"+
    "\1\16\5\0\3\16\1\42\13\16\2\0\5\16\3\0"+
    "\1\16\3\0\5\16\1\0\1\16\5\0\5\16\1\43"+
    "\11\16\2\0\5\16\3\0\1\16\3\0\5\16\1\0"+
    "\1\16\5\0\2\16\1\44\4\16\1\45\7\16\2\0"+
    "\5\16\3\0\1\16\3\0\1\16\1\45\3\16\1\0"+
    "\1\16\5\0\12\16\1\46\4\16\2\0\5\16\3\0"+
    "\1\16\3\0\3\16\1\46\1\16\1\0\1\16\5\0"+
    "\10\16\1\47\6\16\2\0\5\16\3\0\1\16\3\0"+
    "\2\16\1\47\2\16\1\0\1\16\5\0\12\16\1\50"+
    "\4\16\2\0\5\16\3\0\1\16\3\0\3\16\1\50"+
    "\1\16\1\0\1\16\5\0\5\16\1\51\11\16\2\0"+
    "\5\16\3\0\1\16\3\0\5\16\1\0\1\16\5\0"+
    "\17\16\2\0\5\16\3\0\1\16\3\0\5\16\1\0"+
    "\1\16\5\0\2\16\1\52\14\16\2\0\5\16\3\0"+
    "\1\16\3\0\5\16\1\0\1\16\5\0\15\16\1\53"+
    "\1\16\2\0\5\16\3\0\1\16\3\0\5\16\1\0"+
    "\1\16\25\0\1\54\50\0\1\55\30\0\15\16\1\56"+
    "\1\16\2\0\5\16\3\0\1\16\3\0\5\16\1\0"+
    "\1\16\5\0\5\16\1\57\11\16\2\0\5\16\3\0"+
    "\1\16\3\0\5\16\1\0\1\16\5\0\5\16\1\60"+
    "\11\16\2\0\5\16\3\0\1\16\3\0\5\16\1\0"+
    "\1\16\5\0\16\16\1\61\2\0\5\16\3\0\1\16"+
    "\3\0\5\16\1\0\1\16\25\0\1\62\5\0\1\63"+
    "\42\0\1\64\60\0\1\65\51\0\1\32\10\0\1\66"+
    "\3\0\35\67\1\0\13\67\36\70\1\71\1\72\11\70"+
    "\47\0\1\35\4\0\7\16\1\73\7\16\2\0\5\16"+
    "\3\0\1\16\3\0\1\16\1\73\3\16\1\0\1\16"+
    "\5\0\5\16\1\74\11\16\2\0\5\16\3\0\1\16"+
    "\3\0\5\16\1\0\1\16\5\0\3\16\1\75\13\16"+
    "\2\0\5\16\3\0\1\16\3\0\5\16\1\0\1\16"+
    "\5\0\4\16\1\76\12\16\2\0\5\16\3\0\1\16"+
    "\3\0\5\16\1\0\1\16\5\0\5\16\1\77\11\16"+
    "\2\0\5\16\3\0\1\16\3\0\5\16\1\0\1\16"+
    "\5\0\7\16\1\100\7\16\2\0\5\16\3\0\1\16"+
    "\3\0\1\16\1\100\3\16\1\0\1\16\5\0\12\16"+
    "\1\101\4\16\2\0\5\16\3\0\1\16\3\0\3\16"+
    "\1\101\1\16\1\0\1\16\5\0\11\16\1\102\5\16"+
    "\2\0\5\16\3\0\1\16\3\0\5\16\1\0\1\16"+
    "\5\0\16\16\1\103\2\0\5\16\3\0\1\16\3\0"+
    "\5\16\1\0\1\16\5\0\7\16\1\104\7\16\2\0"+
    "\5\16\3\0\1\16\3\0\1\16\1\104\3\16\1\0"+
    "\1\16\5\0\7\16\1\105\7\16\2\0\5\16\3\0"+
    "\1\16\3\0\1\16\1\105\3\16\1\0\1\16\5\0"+
    "\1\106\16\16\2\0\5\16\3\0\1\16\3\0\5\16"+
    "\1\0\1\16\5\0\6\16\1\107\10\16\2\0\5\16"+
    "\3\0\1\16\3\0\5\16\1\0\1\16\5\0\5\16"+
    "\1\110\11\16\2\0\5\16\3\0\1\16\3\0\5\16"+
    "\1\0\1\16\5\0\1\111\16\16\2\0\5\16\3\0"+
    "\1\16\3\0\5\16\1\0\1\16\5\0\2\16\1\112"+
    "\14\16\2\0\5\16\3\0\1\16\3\0\5\16\1\0"+
    "\1\16\2\0\1\113\1\114\1\115\30\113\1\116\14\113"+
    "\1\114\34\0\1\117\51\0\1\120\50\0\10\70\7\0"+
    "\6\16\1\121\10\16\2\0\5\16\3\0\1\16\3\0"+
    "\5\16\1\0\1\16\5\0\4\16\1\103\12\16\2\0"+
    "\5\16\3\0\1\16\3\0\5\16\1\0\1\16\5\0"+
    "\2\16\1\122\14\16\2\0\5\16\3\0\1\16\3\0"+
    "\5\16\1\0\1\16\5\0\13\16\1\123\3\16\2\0"+
    "\5\16\3\0\1\16\3\0\5\16\1\0\1\16\5\0"+
    "\1\124\16\16\2\0\5\16\3\0\1\16\3\0\5\16"+
    "\1\0\1\16\5\0\2\16\1\125\14\16\2\0\5\16"+
    "\3\0\1\16\3\0\5\16\1\0\1\16\5\0\16\16"+
    "\1\126\2\0\5\16\3\0\1\16\3\0\5\16\1\0"+
    "\1\16\5\0\3\16\1\127\13\16\2\0\5\16\3\0"+
    "\1\16\3\0\5\16\1\0\1\16\5\0\12\16\1\130"+
    "\4\16\2\0\5\16\3\0\1\16\3\0\3\16\1\130"+
    "\1\16\1\0\1\16\5\0\3\16\1\131\13\16\2\0"+
    "\5\16\3\0\1\16\3\0\5\16\1\0\1\16\5\0"+
    "\11\16\1\132\5\16\2\0\5\16\3\0\1\16\3\0"+
    "\5\16\1\0\1\16\5\0\4\16\1\133\12\16\2\0"+
    "\5\16\3\0\1\16\3\0\5\16\1\0\1\16\2\0"+
    "\1\113\1\134\1\115\45\113\1\114\1\113\1\135\1\115"+
    "\45\113\1\114\33\116\1\136\15\116\3\0\7\16\1\137"+
    "\7\16\2\0\5\16\3\0\1\16\3\0\1\16\1\137"+
    "\3\16\1\0\1\16\5\0\10\16\1\140\6\16\2\0"+
    "\5\16\3\0\1\16\3\0\2\16\1\140\2\16\1\0"+
    "\1\16\5\0\12\16\1\141\4\16\2\0\5\16\3\0"+
    "\1\16\3\0\3\16\1\141\1\16\1\0\1\16\5\0"+
    "\2\16\1\142\14\16\2\0\5\16\3\0\1\16\3\0"+
    "\5\16\1\0\1\16\5\0\2\16\1\143\14\16\2\0"+
    "\5\16\3\0\1\16\3\0\5\16\1\0\1\16\5\0"+
    "\7\16\1\144\7\16\2\0\5\16\3\0\1\16\3\0"+
    "\1\16\1\144\3\16\1\0\1\16\2\0\33\116\1\145"+
    "\15\116\3\0\17\16\2\0\4\16\1\146\3\0\1\16"+
    "\3\0\5\16\1\0\1\16\5\0\10\16\1\147\6\16"+
    "\2\0\5\16\3\0\1\16\3\0\2\16\1\147\2\16"+
    "\1\0\1\16\5\0\6\16\1\150\10\16\2\0\5\16"+
    "\3\0\1\16\3\0\5\16\1\0\1\16\5\0\1\151"+
    "\16\16\2\0\5\16\3\0\1\16\3\0\5\16\1\0"+
    "\1\16\2\0\33\116\1\152\15\116\3\0\10\16\1\153"+
    "\6\16\2\0\5\16\3\0\1\16\3\0\2\16\1\153"+
    "\2\16\1\0\1\16\5\0\5\16\1\154\11\16\2\0"+
    "\5\16\3\0\1\16\3\0\5\16\1\0\1\16\5\0"+
    "\10\16\1\155\6\16\2\0\5\16\3\0\1\16\3\0"+
    "\2\16\1\155\2\16\1\0\1\16\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3198];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\50\1\2\11\4\1\3\11\4\0\1\11"+
    "\1\0\20\1\1\0\2\1\1\0\1\1\1\11\13\1"+
    "\2\11\1\0\6\1\1\0\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Parser yyparser;

  public Yylex(java.io.Reader r, Parser yyparser)
  {
    this(r);
    this.yyparser = yyparser;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 33: 
          { yyparser.column += yytext().length(); System.out.println("lex: found return\n"); return (Parser.RETURN);
          }
        case 37: break;
        case 27: 
          { yyparser.column += yytext().length(); System.out.println("lex: found char\n"); return (Parser.CHAR);
          }
        case 38: break;
        case 36: 
          { yyparser.column += yytext().length(); System.out.println("lex: found question\n"); return (Parser.QUESTION);
          }
        case 39: break;
        case 16: 
          { System.out.println("lex: found string_literal\n"); 
					yyparser.yylval = new ParserVal(yytext().substring(1,yytext().length()-1));
					return (Parser.STRINGLITERAL);
          }
        case 40: break;
        case 20: 
          { yyparser.column += yytext().length(); System.out.println("lex: found not\n"); return (Parser.NOT);
          }
        case 41: break;
        case 32: 
          { yyparser.column += yytext().length(); System.out.println("lex: found string\n"); return (Parser.STRING);
          }
        case 42: break;
        case 13: 
          { yyparser.column += yytext().length(); System.out.println("lex: found <=\n"); return (Parser.LE);
          }
        case 43: break;
        case 10: 
          { yyparser.column += yytext().length(); System.out.println("lex: found or\n"); return (Parser.OR);
          }
        case 44: break;
        case 35: 
          { yyparser.column += yytext().length(); System.out.println("lex: found boolean\n"); return (Parser.BOOLEAN);
          }
        case 45: break;
        case 4: 
          { yyparser.column += yytext().length(); System.out.println("lex: found <\n"); return (Parser.LT);
          }
        case 46: break;
        case 17: 
          { yyparser.column += yytext().length(); System.out.println("lex: found int\n"); return (Parser.INT);
          }
        case 47: break;
        case 25: 
          { yyparser.column += yytext().length(); System.out.println("lex: found loop\n"); return (Parser.LOOP);
          }
        case 48: break;
        case 15: 
          { yyparser.column += yytext().length(); System.out.println("lex: found >=\n"); return (Parser.GE);
          }
        case 49: break;
        case 24: 
          { yyparser.column += yytext().length(); System.out.println("lex: found else\n"); return (Parser.ELSE);
          }
        case 50: break;
        case 3: 
          { System.out.println("lex: found id\n"); 
						yyparser.yylval = new ParserVal(yytext());
						return (Parser.ID);
          }
        case 51: break;
        case 7: 
          { System.out.println("lex: found int_literal\n");
					yyparser.yylval = new ParserVal(Integer.parseInt(yytext())); 
					return (Parser.INTLITERAL);
          }
        case 52: break;
        case 28: 
          { yyparser.column += yytext().length(); System.out.println("lex: found void\n"); return (Parser.VOID);
          }
        case 53: break;
        case 31: 
          { yyparser.column += yytext().length(); System.out.println("lex: found while\n"); return (Parser.WHILE);
          }
        case 54: break;
        case 12: 
          { yyparser.column += yytext().length(); System.out.println("lex: found ==\n"); return (Parser.EQUALEQUAL);
          }
        case 55: break;
        case 5: 
          { yyparser.column += yytext().length(); System.out.println("lex: found >\n"); return (Parser.GT);
          }
        case 56: break;
        case 1: 
          { yyparser.column = 0;
					System.out.println("lex: found individual char: " + yytext() + "\n");
					yyparser.yylval = new ParserVal(yytext()); 
					return yycharat(0);		
					//return new ParserVal(yytext());
          }
        case 57: break;
        case 19: 
          { yyparser.column += yytext().length(); System.out.println("lex: found and\n"); return (Parser.AND);
          }
        case 58: break;
        case 23: 
          { System.out.println("lex: found char_literal\n");
					yyparser.yylval = new ParserVal(Integer.parseInt(yytext())); 
					return (Parser.CHARLITERAL);
          }
        case 59: break;
        case 14: 
          { yyparser.column += yytext().length(); System.out.println("lex: found <<\n"); return (Parser.INSERT);
          }
        case 60: break;
        case 8: 
          { yyparser.column += yytext().length(); System.out.println("lex: found whitespace or newline or tab\n");/* ignore */
          }
        case 61: break;
        case 11: 
          { yyparser.column += yytext().length(); System.out.println("lex: found !=\n"); return (Parser.NOTEQUAL);
          }
        case 62: break;
        case 21: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { /*Ignore*/
          }
        case 63: break;
        case 29: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { /*Ignore*/
          }
        case 64: break;
        case 34: 
          { /*Ignore*/
          }
        case 65: break;
        case 18: 
          { yyparser.column += yytext().length(); System.out.println("lex: found set\n"); return (Parser.SET);
          }
        case 66: break;
        case 30: 
          { yyparser.column += yytext().length(); System.out.println("lex: found float\n"); return (Parser.FLOAT);
          }
        case 67: break;
        case 2: 
          { yyparser.column = 0;
                    yyparser.line++;
          }
        case 68: break;
        case 22: 
          { System.out.println("lex: found float_literal\n");
					yyparser.yylval = new ParserVal(Double.parseDouble(yytext())); 
					return (Parser.FLOATLITERAL);
          }
        case 69: break;
        case 6: 
          { yyparser.column += yytext().length(); System.out.println("lex: found percent\n"); return (Parser.MOD);
          }
        case 70: break;
        case 9: 
          { yyparser.column += yytext().length();
						System.out.println("lex: found if\n"); return (Parser.IF);
          }
        case 71: break;
        case 26: 
          { System.out.println("lex: found bool_literal\n");
							yyparser.yylval = new ParserVal(yytext()); 
							return (Parser.BOOLLITERAL);
          }
        case 72: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return 0; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
